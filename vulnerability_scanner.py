#!/usr/bin/env python3
 
import requests
import re
import urllib.parse as urllib
from bs4 import BeautifulSoup
 
 
class Scanner:
    def __init__(self, url, links_to_ignore):
        self.links_to_ignore = links_to_ignore
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
 
    def link_exctractor(self, url):
        response = self.session.get(url)
        return re.findall('(?:href=")(.*?)"', response.content.decode(errors="ignore"))
        # for py3 it is response.content.decode(errors="ignore")
 
    def crawl(self, url=None):
        if url == None:
            url = self.target_url
        href_links = self.link_exctractor(url)
        for link in href_links:
            link = urllib.urljoin(url, link)
            if "#" in link:
                link = link.split("#")[0]
            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link)
 
    def extract_forms(self, url):
        response = self.session.get(url)
        parsed_html = BeautifulSoup(response.content, 'html.parser')
        return parsed_html.findALL("form")
 
    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urllib.urljoin(url, action)
        method = form.get("method")
 
        input_list = form.findALL("input")
        post_data_dict = {}
        for form_input in input_list:
            input_name = form_input.get("name")
            input_type = form_input.get("type")
            input_value = form_input.get("value")
            if input_type == "text":
                input_value = value
            post_data_dict[input_name] = input_value
        if method == "post":
            return self.session.post(post_url, data=post_data_dict)
        return self.session.get(post_url, params=post_data_dict)
 
    def run_scanner(self):
        for link in self.target_links:
            forms = self.extract_forms(link)
            for form in forms:
                print("[+] Testing form in " + link)
                is_vulnerable_to_xss = self.test_xss_in_form(form, link)
                if is_vulnerable_to_xss:
                    print("\n\n[***] XSS discovered in " + link + " in the following form")
                    print(form)
 
            if "=" in link:
                print("[*] testing the link " + link)
                is_vulnerable_to_xss = self.test_xss_in_link(link)
                if is_vulnerable_to_xss:
                    print("[***] XSS discovered in " + link + " in the following form")
 
    def test_xss_in_link(self, url):
        xss_test_script = "<sCript>alert('XSS Vulnerability Detected')</scrIpt>"
        url = url.replace("=", "=" + xss_test_script)
        response = self.session.get(url)
        if xss_test_script.encode() in response.content:
            return True
 
    def test_xss_in_form(self, form, url):
        xss_test_script = "<sCript>alert('XSS Vulnerability Detected')</scrIpt>"
        response = self.submit_form(form, xss_test_script, url)
        if xss_test_script.encode() in response.content:
            return True
